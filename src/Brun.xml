<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Brun</name>
    </assembly>
    <members>
        <member name="T:Brun.BackRun">
            <summary>
            包含容器和自定义数据的单次后台任务
            </summary>
        </member>
        <member name="P:Brun.BackRun.Data">
            <summary>
            共享的自定义数据，修改时请自己加锁
            </summary>
        </member>
        <member name="M:Brun.BackRun.Run(System.Threading.CancellationToken)">
            <summary>
            定义长时间任务时，自己用stoppingToken控制任务尽快结束
            </summary>
            <param name="stoppingToken">结束信号</param>
            <returns></returns>
        </member>
        <member name="P:Brun.BaskRuns.BackRunServicePrivoder.ServiceProvider">
            <summary>
            Host注册的服务，跟asp.net一样使用，只是Scope要自己创建管理
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.BackRunServicePrivoder.GetRequiredService``1">
            <summary>
            获取host注入的Service,找不到会异常，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.BackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.BackRunServicePrivoder.GetService``1">
            <summary>
            获取host注入的Service,可能返回null，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.BackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.BackRunServicePrivoder.NewScope">
            <summary>
            创建一个Scope来自己管理Scoped服务的生存周期，单例和瞬时的服务不需要用这个
            </summary>
            <returns></returns>
        </member>
        <member name="T:Brun.BaskRuns.IBackRun">
            <summary>
            所有后台任务的接口,直接继承这个无法使用自定义Data
            </summary>
        </member>
        <member name="T:Brun.BaskRuns.ScopeBackRun">
            <summary>
            每次运行在Ioc的Scope中，可以理解成类似mvc每个请求的生命周期
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.ScopeBackRun.BaseServiceProvider">
            <summary>
            原始ServiceProvider
            </summary>
        </member>
        <member name="F:Brun.BaskRuns.ScopeBackRun.ServiceProvider">
            <summary>
            Scope内的ServiceProvider
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.ScopeBackRun.Data">
            <summary>
            每次运行共享的自定义数据，修改请自己加锁
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.RunInScope(System.Threading.CancellationToken)">
            <summary>
            每次会创建一个Scope，ServiceProvider变为Scope内的ServiceProvider，可以理解成类似mvc每个请求的生命周期
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.Run(System.Threading.CancellationToken)">
            <summary>
            运行入口
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.GetRequiredService``1">
            <summary>
            获取Ioc注入的Service,找不到会异常，可以获取所有Ioc的Service
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.GetService``1">
            <summary>
            获取Ioc注入的Service,可能返回null，可以获取所有Ioc的Service
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Brun.BaskRuns.ScopeBackRunServicePrivoder.ServiceProvider">
            <summary>
            Host注册的服务，跟asp.net一样使用，只是Scope要自己创建管理
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.GetRequiredService``1">
            <summary>
            获取Ioc注入的Service,找不到会异常，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.GetService``1">
            <summary>
            获取Ioc注入的Service,可能返回null，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.NewScope">
            <summary>
            创建一个Scope来自己管理Scoped服务的生存周期，单例和瞬时的服务不需要用这个
            </summary>
            <returns></returns>
        </member>
        <member name="T:Brun.QueueBackRun">
            <summary>
            队列任务基类
            </summary>
        </member>
        <member name="M:Brun.QueueBackRun.Run(System.String,System.Threading.CancellationToken)">
            <summary>
            业务逻辑
            </summary>
            <param name="message"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Contexts.BrunContext">
            <summary>
            每个BackRun运行时的上下文
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Key">
            <summary>
            Worker唯一标识
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Name">
            <summary>
            Worker名称，默认类型名称
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Tag">
            <summary>
            自定义Tag
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Option">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Exceptions">
            <summary>
            BackRun运行异常列表，默认最多储存10个
            </summary>
        </member>
        <member name="M:Brun.WorkerContext.ExceptFromRun(System.Exception)">
            <summary>
            添加run异常事件
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:Brun.WorkerContext.State">
            <summary>
            TODO 当前状态
            </summary>
        </member>
        <member name="T:Brun.Enums.WorkerState">
            <summary>
            Worker状态
            </summary>
        </member>
        <member name="F:Brun.Enums.WorkerState.Default">
            <summary>
            默认状态
            </summary>
        </member>
        <member name="F:Brun.Enums.WorkerState.Started">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:Brun.Enums.WorkerState.Stoped">
            <summary>
            已停止
            </summary>
        </member>
        <member name="M:Brun.ServiceCollectionExtensions.AddBrunService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            以服务形式启动Brun.在Program  .ConfigureServices 中使用.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.ServiceCollectionExtensions.AddBrunService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            以服务形式启动Brun.在Program  .ConfigureServices 中使用.
            </summary>
            <param name="services"></param>
            <param name="configure">和在host中注入服务没有任何区别，可能你需要在代码位置上明确这些服务只给Brun使用</param>
            <returns></returns>
        </member>
        <member name="T:Brun.IWorker">
            <summary>
            工作中心，每个实例会常驻进程
            </summary>
        </member>
        <member name="P:Brun.IWorker.Key">
            <summary>
            Worker唯一Id
            </summary>
        </member>
        <member name="P:Brun.IWorker.Name">
            <summary>
            Worker名称，配置时指定，不指定为类型名称
            </summary>
        </member>
        <member name="P:Brun.IWorker.Tag">
            <summary>
            Worker分组标签
            </summary>
        </member>
        <member name="P:Brun.IWorker.Context">
            <summary>
            Worker上下文
            </summary>
        </member>
        <member name="M:Brun.IWorker.Start">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IWorker.Stop">
            <summary>
            停止
            </summary>
            <returns></returns>
        </member>
        <member name="P:Brun.IWorker.TaskFactory">
            <summary>
            TaskFactory
            </summary>
        </member>
        <member name="P:Brun.IWorker.RunningTasks">
            <summary>
            运行中的Task
            </summary>
        </member>
        <member name="M:Brun.IWorker.AsOnceWorker">
            <summary>
            转换到IOnceWorker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IWorker.AsQueueWorker">
            <summary>
            类型转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IWorker.AsTimeWOrker">
            <summary>
            类型转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IWorker.AsPlanTimeWorker">
            <summary>
            类型转换
            </summary>
            <returns></returns>
        </member>
        <member name="T:Brun.Observers.WorkerObserver">
            <summary>
            backrun运行拦截器
            </summary>
        </member>
        <member name="M:Brun.Observers.WorkerObserver.#ctor(Brun.Enums.WorkerEvents,System.Int32)">
            <summary>
            构造函数，指定拦截的位置和顺序
            </summary>
            <param name="workerEvent"><see cref="T:Brun.Enums.WorkerEvents"/></param>
            <param name="order">越小先执行，默认100，100以内为组件内部拦截器</param>
        </member>
        <member name="T:Brun.Options.TimeWorkerOption">
            <summary>
            TimeWorker选项
            </summary>
        </member>
        <member name="P:Brun.Options.TimeWorkerOption.Cycle">
            <summary>
            定时执行周期
            </summary>
        </member>
        <member name="P:Brun.Options.TimeWorkerOption.RunWithStart">
            <summary>
            程序启动/重启时执行一次
            </summary>
        </member>
        <member name="T:Brun.Options.WorkerOption">
            <summary>
            用于构造Worker
            </summary>
        </member>
        <member name="P:Brun.Options.WorkerOption.DefaultBrunType">
            <summary>
            默认的BrunType
            </summary>
        </member>
        <member name="P:Brun.Options.WorkerOption.Data">
            <summary>
            run内部还是需要自己加锁保证线程安全
            </summary>
        </member>
        <member name="T:Brun.Plan.CronParser">
            <summary>
                1      2     3       4     5      6         7
             {秒数} {分钟} {小时} {日期} {月份} {星期} {年份(可为空)}
            </summary>
        </member>
        <member name="T:Brun.Plan.CroParser">
            <summary>
            Cron的简化版，合并可能冲突的日期和星期域
                1      2     3          4          5        6
             {秒数} {分钟} {小时} {日期}/{星期} {月份} {年份(可为空)}
            </summary>
        </member>
        <member name="M:Brun.Plan.CroParser.Parse(System.String)">
            <summary>
            解析Cro表达式
            </summary>
            <param name="croExpression"></param>
        </member>
        <member name="M:Brun.Plan.CroParser.CoumnParse(Brun.Plan.TimeCloumnType,System.String)">
            <summary>
            解析单个域
            </summary>
            <param name="cloumnType"></param>
            <param name="plan"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseAnd(Brun.Plan.TimeCloumn)">
            <summary>
            解析, TimeStrategy.And
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseTo(Brun.Plan.TimeCloumn)">
            <summary>
            解析-  TimeStrategy.To  特殊： /步进第一个参数可以包含-
            </summary>
            <param name="cloumn"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseStep(Brun.Plan.TimeCloumn)">
            <summary>
            解析/ TimeStrategy.Step 特殊： /步进第一个参数可以包含-，*
            </summary>
            <param name="cloumn"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseNb(Brun.Plan.TimeCloumn)">
            <summary>
            解析纯数字
            </summary>
            <param name="cloumn"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.IPlanTimeParser">
            <summary>
            时间计划解析器
            </summary>
        </member>
        <member name="M:Brun.Plan.IPlanTimeParser.Parse(System.String)">
            <summary>
            解析计划表达式
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.ParseResult">
            <summary>
            解析结果
            </summary>
        </member>
        <member name="P:Brun.Plan.ParseResult.Errors">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Brun.Plan.ParseResult.AddError(System.Int32,System.String)">
            <summary>
            添加异常信息
            </summary>
            <param name="n">第n个域的参数</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:Brun.Plan.ParseResult.AddTimeCloumn(Brun.Plan.TimeCloumn)">
            <summary>
            添加TimeCloumn
            </summary>
            <param name="timeCloumn"></param>
        </member>
        <member name="P:Brun.Plan.ParseResult.IsError">
            <summary>
            解析是否异常
            </summary>
        </member>
        <member name="P:Brun.Plan.ParseResult.TimeCloumns">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:Brun.Plan.ParseResult.IsWeek">
            <summary>
            是否星期，和日期互斥
            </summary>
        </member>
        <member name="T:Brun.Plan.PlanTime">
            <summary>
            时间计划
            </summary>
        </member>
        <member name="M:Brun.Plan.PlanTime.#ctor(Brun.Plan.IPlanTimeParser)">
            <summary>
            需要自己调用Parse方法
            </summary>
            <param name="planTimeParser"></param>
        </member>
        <member name="M:Brun.Plan.PlanTime.#ctor(System.String,Brun.Plan.IPlanTimeParser)">
            <summary>
            内部已经调用Parse方法
            </summary>
            <param name="strExpression"></param>
            <param name="planTimeParser"></param>
        </member>
        <member name="M:Brun.Plan.PlanTime.Parse(System.String)">
            <summary>
            解析时间计划表达式
            </summary>
            <param name="strExpression"></param>
            <returns>true：success，false：error</returns>
        </member>
        <member name="M:Brun.Plan.PlanTime.GetNextTime">
            <summary>
            以当前时间计算下次触发时间,精确到秒
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.PlanTime.GetNextTime(System.DateTimeOffset)">
            <summary>
            以startTime开始计算下次触发时间，精确到秒
            </summary>
            <param name="startTime"></param>
            <returns></returns>
        </member>
        <member name="P:Brun.Plan.PlanTime.Expression">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.IsParsed">
            <summary>
            是否已解析
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.Errors">
            <summary>
            解析失败的异常信息
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.Times">
            <summary>
            解析后的结果，仅储存原始字符串和计划策略
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeCloumn">
            <summary>
            时间列/表达式的域 6列 yyyy-MM-dd HH:mm:ss 
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeCloumn.#ctor(Brun.Plan.TimeCloumnType)">
            <summary>
            时间列
            </summary>
            <param name="cloumnType"></param>
        </member>
        <member name="M:Brun.Plan.TimeCloumn.#ctor(Brun.Plan.TimeCloumnType,System.String)">
            <summary>
            时间列 6列 yyyy-MM-dd HH:mm:ss 
            </summary>
            <param name="timeCloumnType"></param>
            <param name="planStr"></param>
        </member>
        <member name="M:Brun.Plan.TimeCloumn.SetStrategy(Brun.Plan.TimeStrategy)">
            <summary>
            设置策略类型
            </summary>
            <param name="timeStrategy"></param>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.Plan">
            <summary>
            原始字符串
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.CloumnType">
            <summary>
            Cloumn类型，分/秒/天...
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.TimeStrategy">
            <summary>
            策略类型
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.IsFinish">
            <summary>
            是否已解析完成
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.Min">
            <summary>
            允许的最小值
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.Max">
            <summary>
            允许的最大值
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeCloumnType">
            <summary>
            表达式域的类型 yyyy-MM-dd HH:mm:ss 
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.None">
            <summary>
            默认值，没有分配到任何列
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Week">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeComputers.BasePlanTimeComputer">
            <summary>
            计算PlanTime下次执行时间，计算流程需要单独控制，特殊情况会递归
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Compute(System.Nullable{System.DateTimeOffset},Brun.Plan.PlanTime)">
            <summary>
            计算下次执行时间
            </summary>
            <param name="startTime"></param>
            <param name="planTime"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Last(System.DateTimeOffset)">
            <summary>
            L 最后n天 仅TimeCloumnType.Day中可用
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Step(System.DateTimeOffset)">
            <summary>
            / 步进 10/5  */5  10-50/5
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.To(System.DateTimeOffset)">
            <summary>
            - 范围 10-30
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.And(System.DateTimeOffset)">
            <summary>
            , 数组 2,5,8
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Any(System.DateTimeOffset)">
            <summary>
            * 任意
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Number(System.DateTimeOffset)">
            <summary>
            纯数字
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.DayComputer">
            <summary>
            计算天
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.DayComputer.Number(System.DateTimeOffset)">
            <summary>
            范围1-31，有些月只有28，30，29，没有就快进到下个月
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.DayComputer.Last(System.DateTimeOffset)">
            <summary>
            最后N天，L=最后一天 5L=最后一天再往前5天
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.DayComputer.AddDaysFix(System.DateTimeOffset,System.Int32)">
            <summary>
            本月Fix
            </summary>
            <param name="start"></param>
            <param name="planDay"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.HourComputer">
            <summary>
            小时
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.HourComputer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeComputers.MinuteComputer">
            <summary>
            计算分
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.Any(System.DateTimeOffset)">
            <summary>
            *
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.And(System.DateTimeOffset)">
            <summary>
            ,
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.To(System.DateTimeOffset)">
            <summary>
            -
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.Step(System.DateTimeOffset)">
            <summary>
            / 步进 第一个参数可能是数字或*或1-10
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.MonthComputer">
            <summary>
            计算月
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeComputers.MonthComputer.initMonth">
            <summary>
            初始月，在这里变化后可能需要重新计算天
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeComputers.MonthComputer.initYear">
            <summary>
            初始年，这里可能跨年，也可能需要重新计算天
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeComputers.MonthComputer.GoBack">
            <summary>
            是否回到Day重新计算
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeComputers.SecondComputer">
            <summary>
            计算秒
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.Any(System.DateTimeOffset)">
            <summary>
            * 任意秒
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.And(System.DateTimeOffset)">
            <summary>
            , 和 1,5,10
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.To(System.DateTimeOffset)">
            <summary>
            - 范围 10-50
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.Step(System.DateTimeOffset)">
            <summary>
            / 步进 第一个参数可能是数字或*或1-10
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.YearComputer">
            <summary>
            计算年
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeComputers.YearComputer.initYear">
            <summary>
            年变化后回到dayComputer重新计算
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeComputers.YearComputer.GoBack">
            <summary>
            是否回到Day重新计算
            </summary>
        </member>
        <member name="T:Brun.Plan.PlanTimeComputer">
            <summary>
            计算PlanTime下次执行时间
            </summary>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.#ctor">
            <summary>
            需要自己SetPlanTime
            </summary>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.#ctor(Brun.Plan.PlanTime)">
            <summary>
            构造函数传入解析好的PlanTime
            </summary>
            <param name="planTime"></param>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.SetPlanTime(Brun.Plan.PlanTime)">
            <summary>
            传入解析好的PlanTime
            </summary>
            <param name="planTime"></param>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.GetNextTime">
            <summary>
            计算下一次执行时间,如果上次执行时间为null，则以当前时间为基准
            </summary>
            <returns>找不到或超出范围返回null</returns>
        </member>
        <member name="P:Brun.Plan.PlanTimeComputer.LastTime">
            <summary>
            上一次执行时间，没有为null
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTimeComputer.NextTime">
            <summary>
            获取下一次执行时间，没有为null
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTimeComputer.PlanTime">
            <summary>
            对应的PlanTime
            </summary>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.SetLastTime(System.DateTimeOffset)">
            <summary>
            设置上一次执行时间
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.SetNextTime(System.DateTimeOffset)">
            <summary>
            设置下一次执行时间
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.GetNextTime(System.DateTimeOffset)">
            <summary>
            计算下一次计划时间
            </summary>
            <param name="start">开始时间</param>
            <returns>找不到或超出范围返回null</returns>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.Equals(System.Object)">
            <summary>
            重写相等判断，以PlanTime.Expression是否相同为标准（大写），PlanTime=null永不相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeStrategy">
            <summary>
            表达式域解析策略
            , - * / ...的各种策略
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.None">
            <summary>
            默认值，没有任何策略
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Number">
            <summary>
            纯数字
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.And">
            <summary>
            , 数组 0,15,45
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.To">
            <summary>
            - 范围 25-45
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Any">
            <summary>
            * 任何 每(秒/天)
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Step">
            <summary>
            / 步进 number或*(等同0)或范围/步进值
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Last">
            <summary>
            L 只能在日期域中出现，最后一天，5L：当月最后一天再倒数5天
            </summary>
        </member>
        <member name="T:Brun.WorkerBuilder">
            <summary>
            Woker建造器,在WorkerServer启动之前先配置好worker
            TODO 创建Client，在WorkerServer运行之后再生成worker
            </summary>
        </member>
        <member name="M:Brun.WorkerBuilder.SetConfig(Brun.WorkerConfig)">
            <summary>
            设置单独的配置
            </summary>
            <param name="workerConfig"></param>
        </member>
        <member name="M:Brun.WorkerBuilder.Create``1">
            <summary>
            创建OnceWorker
            </summary>
            <typeparam name="TBackRun"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.Create``1(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.String})">
            <summary>
            创建OnceWorker
            </summary>
            <typeparam name="TBackRun"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.Add``1">
            <summary>
            配置其他的BackRun在同一个Worker中运行，自定义数据会共享
            </summary>
            <typeparam name="TBackRun"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.CreateQueue``1">
            <summary>
            创建队列任务
            </summary>
            <typeparam name="TQueueBackRun"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.AddQueue``1">
            <summary>
            配置其他的QueueBackRun在同一个QueueBackRun中运行，
            </summary>
            <typeparam name="TQueueBackRun"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.CreateTime``1">
            <summary>
            创建定时任务
            </summary>
            <typeparam name="TBackRun"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.CreateTime``1(System.TimeSpan,System.Boolean)">
            <summary>
            创建定时任务
            </summary>
            <typeparam name="TBackRun"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.SetCycle(System.TimeSpan,System.Boolean)">
            <summary>
            设置TimeWorker的定时执行周期
            </summary>
            <param name="cycle">运行周期</param>
            <param name="runWithStart">程序运行/重启时是否立即执行一次</param>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.CreatePlanTime``1(System.String[])">
            <summary>
            创建PlanTimeWorker，用于复杂的定时计划任务
            </summary>
            <typeparam name="TBackRun"></typeparam>
            <param name="croExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.CreateTime">
            <summary>
            可以不指定BackRun类型而指定Worker实例Key，内部调用OnceWorker的run
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.SetWorkerType(System.Type)">
            <summary>
            设置worker类型，默认OnceWorker
            </summary>
            <param name="workerType"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.SetKey(System.String)">
            <summary>
            自己保证唯一，为空时默认newGuid
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.WorkerBuilder.SetName(System.String)">
            <summary>
            可以重复，为空默认使用类名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.WorkerServer">
            <summary>
            进程单例，暂时只考虑单机运行
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.ServerConfig">
            <summary>
            server配置，用于设置系统默认配置
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.Worders">
            <summary>
            所有运行中的worker
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.ServiceProvider">
            <summary>
            服务容器
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.StoppingToken">
            <summary>
            服务结束Token
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.TaskFactory">
            <summary>
            公共的Task管理
            </summary>
        </member>
        <member name="M:Brun.WorkerServer.Start(System.IServiceProvider,System.Threading.CancellationToken)">
            <summary>
            启动Brun
            </summary>
            <param name="serviceProvider"></param>
            <param name="stoppingToken"></param>
        </member>
        <member name="P:Brun.WorkerServer.Instance">
            <summary>
            进程单例
            </summary>
        </member>
        <member name="M:Brun.WorkerServer.ClearInstance">
            <summary>
            清理单例，单元测试用
            </summary>
        </member>
        <member name="T:Brun.Workers.AbstractWorker">
            <summary>
            工作中心基类，可以builder多个，不同实例里面的Context不同
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker._option">
            <summary>
            选项
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker._config">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker._context">
            <summary>
            worker上下文
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker.tokenSource">
            <summary>
            管理单个实例的token
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker.taskFactory">
            <summary>
            统一配置实例内的Task
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker.State_LOCK">
            <summary>
            状态锁
            </summary>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.#ctor(Brun.Options.WorkerOption,Brun.WorkerConfig)">
            <summary>
            统一构造函数
            </summary>
            <param name="option"></param>
            <param name="config"></param>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Start">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Stop">
            <summary>
            停止
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Observe(System.Type,Brun.Enums.WorkerEvents)">
            <summary>
            添加拦截器
            </summary>
            <param name="brunType"></param>
            <param name="workerEvents"></param>
            <returns></returns>
        </member>
        <member name="P:Brun.Workers.AbstractWorker.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Brun.Workers.AbstractWorker.RunningTasks">
            <summary>
            正在运行的任务
            </summary>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.As``1">
            <summary>
            类型转换
            </summary>
            <typeparam name="TWorker"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Dispose">
            <summary>
            回收单个Worker
            </summary>
        </member>
        <member name="T:Brun.Workers.OnceWorker">
            <summary>
            基础Worker，每次执行一次
            </summary>
        </member>
        <member name="F:Brun.Workers.OnceWorker.backRuns">
            <summary>
            包含的Backrun
            </summary>
        </member>
        <member name="M:Brun.Workers.OnceWorker.StartBrun(System.Type)">
            <summary>
            启动线程，开始执行Execute
            </summary>
        </member>
        <member name="T:Brun.Workers.PlanTimeWorker">
            <summary>
            在计划时间内执行的Worker
            </summary>
        </member>
        <member name="T:Brun.Workers.QueueWorker">
            <summary>
            简单的内存Queue 自定义数据类型
             TODO 让一个QueueWorker可以配置多个不同类型的QueueBackrun
            </summary>
        </member>
        <member name="M:Brun.Workers.QueueWorker.#ctor(Brun.Options.WorkerOption,Brun.WorkerConfig)">
            <summary>
            QueueWorker
            </summary>
            <param name="option"></param>
            <param name="config"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.GetQueueBackRun(System.Type)">
            <summary>
            获取BackRun
            </summary>
            <param name="brunType"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Execute(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="brunType"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Start">
            <summary>
            启动QueueWorker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Stop">
            <summary>
            停止QueueWorker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue(System.String)">
            <summary>
            默认的QueueBackRun,添加消息到后台任务
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue``1(System.String)">
            <summary>
            指定QueueBackRun类型的消息后台任务
            </summary>
            <typeparam name="TQueueBackRun"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue(System.Type,System.String)">
            <summary>
            指定QueueBackRun类型的消息后台任务
            </summary>
            <param name="queueBackRunType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue(System.String,System.String)">
            <summary>
            指定QueueBackRun类型的消息后台任务
            </summary>
            <param name="queueBackRunTypeFullName"></param>
            <param name="message"></param>
        </member>
        <member name="T:Brun.Workers.SynchroWorker">
            <summary>
            同步Worker，同一个Worker内，backrun串行运行
            //TODO 优化同步Worker
            </summary>
        </member>
        <member name="M:Brun.Workers.SynchroWorker.Run(System.Type)">
            <summary>
            运行指定类型的BanRun
            </summary>
            <returns></returns>
        </member>
        <member name="T:Brun.Workers.TimeWorker">
            <summary>
            简单的时间循环任务，复杂的定时使用<see cref="T:Brun.Workers.PlanTimeWorker"/>
            //TODO 最简易循环执行任务，继续简化使用
            </summary>
        </member>
        <member name="F:Brun.Workers.TimeWorker.beginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="F:Brun.Workers.TimeWorker.cycle">
            <summary>
            周期
            </summary>
        </member>
        <member name="F:Brun.Workers.TimeWorker.runNb">
            <summary>
            执行次数，-1无限 
            </summary>
        </member>
        <member name="M:Brun.Workers.TimeWorker.#ctor(Brun.Options.TimeWorkerOption,Brun.WorkerConfig)">
            <summary>
            
            </summary>
            <param name="option"></param>
            <param name="config"></param>
        </member>
        <member name="P:Brun.Workers.TimeWorker.BackRun">
            <summary>
            实例内保持唯一
            </summary>
        </member>
        <member name="M:Brun.Workers.TimeWorker.Start">
            <summary>
            启动Worker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.TimeWorker.Execute">
            <summary>
            执行一次队列任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IOnceWorker.GetData">
            <summary>
            自定义数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IOnceWorker.Run">
            <summary>
            运行默认的BackRun
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IOnceWorker.Run``1">
            <summary>
            运行指定类型的BackRun
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IOnceWorker.Run(System.Type)">
            <summary>
            运行指定类型的BackRun
            </summary>
            <param name="backRunType">backRun类型</param>
            <returns></returns>
        </member>
        <member name="M:Brun.IPlanTimeWorker.Start">
            <summary>
            启动，已经单独开了线程
            </summary>
        </member>
        <member name="T:Brun.IQueueWorker">
            <summary>
            消息队列Worker
            </summary>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue(System.String)">
            <summary>
            给默认的QueueBackRun发送消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue``1(System.String)">
            <summary>
            给TQueueBackRun发送消息
            </summary>
            <typeparam name="TQueueBackRun"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue(System.Type,System.String)">
            <summary>
            给queueBackRunType发送消息
            </summary>
            <param name="queueBackRunType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue(System.String,System.String)">
            <summary>
            给指定类型的QueueBackRun发送消息
            </summary>
            <param name="queueBackRunTypeFullName">含命名空间的类型全名</param>
            <param name="message"></param>
        </member>
        <member name="T:Brun.ITimeWorker">
            <summary>
            时间周期执行的Worker
            </summary>
        </member>
        <member name="M:Brun.ITimeWorker.Start">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.ITimeWorker.Pause">
            <summary>
            暂停
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.ITimeWorker.Resume">
            <summary>
            恢复
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
