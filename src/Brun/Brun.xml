<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Brun</name>
    </assembly>
    <members>
        <member name="T:Brun.BaskRuns.BackRun">
            <summary>
            BackRun基础基类，每种Worker独立分开
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.BackRun.Data">
            <summary>
            共享的自定义数据，修改时请自己加锁
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.BackRunServicePrivoder.ServiceProvider">
            <summary>
            Host注册的服务，跟asp.net一样使用，只是Scope要自己创建管理
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.BackRunServicePrivoder.GetRequiredService``1">
            <summary>
            获取host注入的Service,找不到会异常，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.BackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.BackRunServicePrivoder.GetService``1">
            <summary>
            获取host注入的Service,可能返回null，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.BackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.BackRunServicePrivoder.NewScope">
            <summary>
            创建一个Scope来自己管理Scoped服务的生存周期，单例和瞬时的服务不需要用这个
            </summary>
            <returns></returns>
        </member>
        <member name="T:Brun.BaskRuns.IBackRun">
            <summary>
            所有后台任务的接口
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.IBackRun.Id">
            <summary>
            BackRun的Key
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.IBackRun.Name">
            <summary>
            BackRun的Name
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.IBackRun.Data">
            <summary>
            TODO 是否移入上下文
            单个Worker实例中的共享数据
            </summary>
        </member>
        <member name="T:Brun.BaskRuns.IQueueRun">
            <summary>
            QueueBackRun需要带参数的run
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.IQueueRun.Run(System.String,System.Threading.CancellationToken)">
            <summary>
            自己的业务逻辑
            </summary>
            <param name="message">传入的消息</param>
            <param name="stoppingToken">任务结束信号量，当系统正常停止/工作中心停止时会首先发信号，使用该token可以手动停止/取消未完成任务，超时未结束的任务会强制结束</param>
            <returns></returns>
        </member>
        <member name="T:Brun.BaskRuns.IRun">
            <summary>
            不同类型的Worker可能需要不同的run方法
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.IRun.Run(System.Threading.CancellationToken)">
            <summary>
            自己的任务逻辑
            </summary>
            <param name="stoppingToken">任务结束信号量，当系统正常停止/工作中心停止时会首先发信号，使用该token可以手动停止/取消未完成任务，超时未结束的任务会强制结束</param>
            <returns></returns>
        </member>
        <member name="T:Brun.BaskRuns.ScopeBackRun">
            <summary>
            //TODO 移除ScopeBackRun
            每次运行在Ioc的Scope中，可以理解成类似mvc每个请求的生命周期
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.ScopeBackRun.BaseServiceProvider">
            <summary>
            原始ServiceProvider
            </summary>
        </member>
        <member name="F:Brun.BaskRuns.ScopeBackRun.ServiceProvider">
            <summary>
            Scope内的ServiceProvider
            </summary>
        </member>
        <member name="P:Brun.BaskRuns.ScopeBackRun.Data">
            <summary>
            每次运行共享的自定义数据，修改请自己加锁
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.RunInScope(System.Threading.CancellationToken)">
            <summary>
            每次会创建一个Scope，ServiceProvider变为Scope内的ServiceProvider，可以理解成类似mvc每个请求的生命周期
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.Run(System.Threading.CancellationToken)">
            <summary>
            运行入口
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.GetRequiredService``1">
            <summary>
            获取Ioc注入的Service,找不到会异常，可以获取所有Ioc的Service
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRun.GetService``1">
            <summary>
            获取Ioc注入的Service,可能返回null，可以获取所有Ioc的Service
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Brun.BaskRuns.ScopeBackRunServicePrivoder.ServiceProvider">
            <summary>
            Host注册的服务，跟asp.net一样使用，只是Scope要自己创建管理
            </summary>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.GetRequiredService``1">
            <summary>
            获取Ioc注入的Service,找不到会异常，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.GetService``1">
            <summary>
            获取Ioc注入的Service,可能返回null，这里不能获取Scope的Service，必须从<see cref="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.NewScope"/>里获取
            </summary>
            <typeparam name="TService"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Brun.BaskRuns.ScopeBackRunServicePrivoder.NewScope">
            <summary>
            创建一个Scope来自己管理Scoped服务的生存周期，单例和瞬时的服务不需要用这个
            </summary>
            <returns></returns>
        </member>
        <member name="T:Brun.OnceBackRun">
            <summary>
            OnceWorker专用的BackRun
            </summary>
        </member>
        <member name="T:Brun.PlanBackRun">
            <summary>
            计划时间任务
            </summary>
        </member>
        <member name="P:Brun.PlanBackRun.LastRunTime">
            <summary>
            上次执行时间
            </summary>
        </member>
        <member name="P:Brun.PlanBackRun.NextRunTime">
            <summary>
            下次执行时间
            </summary>
        </member>
        <member name="T:Brun.QueueBackRun">
            <summary>
            队列任务基类
            </summary>
        </member>
        <member name="M:Brun.QueueBackRun.Run(System.String,System.Threading.CancellationToken)">
            <summary>
            业务逻辑
            </summary>
            <param name="message"></param>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="P:Brun.QueueBackRun.Queue">
            <summary>
            消息队列
            </summary>
        </member>
        <member name="M:Brun.Commons.BrunTool.GetReferanceAssemblies">
            <summary>
            获取当前程序域里的程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Commons.BrunTool.LoadFile(System.String)">
            <summary>
            加载程序集
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Commons.BrunTool.GetWorkerType(Brun.Enums.WorkerType)">
            <summary>
            获取Worker类型
            </summary>
            <param name="workerType"></param>
            <returns></returns>
            <exception cref="T:Brun.Exceptions.BrunException"></exception>
        </member>
        <member name="M:Brun.Commons.BrunTool.GetTypeByWorkerName(System.String)">
            <summary>
            获取Worker类型,OnceWorker/TimeWorker
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Commons.BrunTool.GetWorkerType(System.Type)">
            <summary>
            获取Worker类型枚举
            </summary>
            <param name="workerType"></param>
            <returns></returns>
            <exception cref="T:Brun.Exceptions.BrunException"></exception>
        </member>
        <member name="M:Brun.Commons.BrunTool.GetWorkerType(System.String)">
            <summary>
            类型字符串获取Worker类型枚举 OnceWorker/TimeWorker
            </summary>
            <param name="workerTypeName"></param>
            <returns></returns>
            <exception cref="T:Brun.Exceptions.BrunException"></exception>
        </member>
        <member name="T:Brun.WorkerConfig">
            <summary>
            Worker配置项
            </summary>
        </member>
        <member name="T:Brun.Contexts.BrunContext">
            <summary>
            每个BackRun运行时的上下文
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Key">
            <summary>
            Worker唯一标识
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Name">
            <summary>
            Worker名称，默认类型名称
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Exceptions">
            <summary>
            BackRun运行异常列表，默认最多储存10个
            </summary>
        </member>
        <member name="M:Brun.WorkerContext.ExceptFromRun(System.Exception)">
            <summary>
            添加run异常事件
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:Brun.WorkerContext.State">
            <summary>
            Worker状态
            </summary>
        </member>
        <member name="P:Brun.WorkerContext.Items">
            <summary>
            OnceWorker共享数据
            </summary>
        </member>
        <member name="T:Brun.Enums.WorkerState">
            <summary>
            Worker状态
            </summary>
        </member>
        <member name="F:Brun.Enums.WorkerState.Default">
            <summary>
            未激活
            </summary>
        </member>
        <member name="F:Brun.Enums.WorkerState.Started">
            <summary>
            运行中
            </summary>
        </member>
        <member name="F:Brun.Enums.WorkerState.Stoped">
            <summary>
            已停止
            </summary>
        </member>
        <member name="T:Brun.Exceptions.BrunErrorCode">
            <summary>
            Brun异常码
            </summary>
        </member>
        <member name="F:Brun.Exceptions.BrunErrorCode.TypeError">
            <summary>
            类型异常
            </summary>
        </member>
        <member name="F:Brun.Exceptions.BrunErrorCode.AllreadyKey">
            <summary>
            id/key重复
            </summary>
        </member>
        <member name="F:Brun.Exceptions.BrunErrorCode.NotFoundKey">
            <summary>
            不包含指定key
            </summary>
        </member>
        <member name="F:Brun.Exceptions.BrunErrorCode.ObjectIsNull">
            <summary>
            对象不能为null
            </summary>
        </member>
        <member name="F:Brun.Exceptions.BrunErrorCode.MemoryServiceError">
            <summary>
            内存服务异常
            </summary>
        </member>
        <member name="F:Brun.Exceptions.BrunErrorCode.StoreServiceError">
            <summary>
            Store服务异常
            </summary>
        </member>
        <member name="T:Brun.Exceptions.BrunException">
            <summary>
            Brun异常信息
            </summary>
        </member>
        <member name="T:Brun.ServiceCollectionExtensions">
            <summary>
            注册入口
            </summary>
        </member>
        <member name="M:Brun.ServiceCollectionExtensions.AddBrunService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Brun.WorkerServerOption})">
            <summary>
            注册 配置 并启用Brun组件
            </summary>
            <param name="services"></param>
            <param name="workerServerOptions"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.IWorker">
            <summary>
            工作中心，每个实例会常驻进程
            </summary>
        </member>
        <member name="P:Brun.IWorker.Key">
            <summary>
            Worker唯一Id
            </summary>
        </member>
        <member name="P:Brun.IWorker.Name">
            <summary>
            Worker名称，配置时指定，不指定为类型名称
            </summary>
        </member>
        <member name="P:Brun.IWorker.Context">
            <summary>
            Worker上下文
            </summary>
        </member>
        <member name="P:Brun.IWorker.State">
            <summary>
            Worker运行状态
            </summary>
        </member>
        <member name="M:Brun.IWorker.Start">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IWorker.Stop">
            <summary>
            停止
            </summary>
            <returns></returns>
        </member>
        <member name="T:Brun.Models.BrunResultState">
            <summary>
            定义常用结果状态码
            </summary>
        </member>
        <member name="F:Brun.Models.BrunResultState.UnKnow">
            <summary>
            未知异常
            </summary>
        </member>
        <member name="F:Brun.Models.BrunResultState.Success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:Brun.Models.BrunResultState.NotRunning">
            <summary>
            Worker未运行
            </summary>
        </member>
        <member name="F:Brun.Models.BrunResultState.NotFound">
            <summary>
            找不到指定数据/对象
            </summary>
        </member>
        <member name="F:Brun.Models.BrunResultState.IdBeUsed">
            <summary>
            Id被占用
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerConfigModel.Key">
            <summary>
            key为空时为随机字符串
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerConfigModel.Name">
            <summary>
            为空时为类型名称字符串
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.TypeName">
            <summary>
            Worker类型名称
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.WorkerType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.Key">
            <summary>
            Worker唯一标识Key
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.Name">
            <summary>
            Worker名称
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.BrunTypes">
            <summary>
            包含的BackRun类型
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.StartNb">
            <summary>
            开始Task的数量
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.ExceptNb">
            <summary>
            异常Task数量
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.EndNb">
            <summary>
            完成Task数量
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.RunningNb">
            <summary>
            正在运行的Task数量
            </summary>
        </member>
        <member name="P:Brun.Models.WorkerInfo.State">
            <summary>
            Worker状态
            </summary>
        </member>
        <member name="T:Brun.Observers.WorkerObserver">
            <summary>
            backrun运行拦截器
            </summary>
        </member>
        <member name="M:Brun.Observers.WorkerObserver.#ctor(Brun.Enums.WorkerEvents,System.Int32)">
            <summary>
            构造函数，指定拦截的位置和顺序
            </summary>
            <param name="workerEvent"><see cref="T:Brun.Enums.WorkerEvents"/></param>
            <param name="order">越小先执行，默认100，100以内为组件内部拦截器</param>
        </member>
        <member name="T:Brun.Options.TimeBackRunOption">
            <summary>
            TimeBackRun配置
            </summary>
        </member>
        <member name="T:Brun.WorkerServerOption">
            <summary>
            WorkerServer配置
            </summary>
        </member>
        <member name="P:Brun.WorkerServerOption.StoreType">
            <summary>
            储存类型
            </summary>
        </member>
        <member name="P:Brun.WorkerServerOption.StoreConn">
            <summary>
            持久化连接字符串
            </summary>
        </member>
        <member name="P:Brun.WorkerServerOption.ServicesConfigure">
            <summary>
            扩展库用的服务注册/替换
            </summary>
        </member>
        <member name="P:Brun.WorkerServerOption.UserName">
            <summary>
            UI登录用户名，默认admin
            </summary>
        </member>
        <member name="P:Brun.WorkerServerOption.Password">
            <summary>
            UI登录密码，默认admin
            </summary>
        </member>
        <member name="T:Brun.WorkerStoreType">
            <summary>
            储存类型
            </summary>
        </member>
        <member name="F:Brun.WorkerStoreType.Store">
            <summary>
            SqlSugar支持的数据库
            </summary>
        </member>
        <member name="T:Brun.Plan.CronParser">
            <summary>
                1      2     3       4     5      6         7
             {秒数} {分钟} {小时} {日期} {月份} {星期} {年份(可为空)}
            </summary>
        </member>
        <member name="T:Brun.Plan.CroParser">
            <summary>
            Cron的简化版，合并可能冲突的日期和星期域
                1      2     3          4          5        6
             {秒数} {分钟} {小时} {日期}/{星期} {月份} {年份(可为空)}
            </summary>
        </member>
        <member name="M:Brun.Plan.CroParser.Parse(System.String)">
            <summary>
            解析Cro表达式
            </summary>
            <param name="croExpression"></param>
        </member>
        <member name="M:Brun.Plan.CroParser.CoumnParse(Brun.Plan.TimeCloumnType,System.String)">
            <summary>
            解析单个域
            </summary>
            <param name="cloumnType"></param>
            <param name="plan"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseAnd(Brun.Plan.TimeCloumn)">
            <summary>
            解析, TimeStrategy.And
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseTo(Brun.Plan.TimeCloumn)">
            <summary>
            解析-  TimeStrategy.To  特殊： /步进第一个参数可以包含-
            </summary>
            <param name="cloumn"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseStep(Brun.Plan.TimeCloumn)">
            <summary>
            解析/ TimeStrategy.Step 特殊： /步进第一个参数可以包含-，*
            </summary>
            <param name="cloumn"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.CroParser.ParseNb(Brun.Plan.TimeCloumn)">
            <summary>
            解析纯数字
            </summary>
            <param name="cloumn"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.IPlanTimeParser">
            <summary>
            时间计划解析器
            </summary>
        </member>
        <member name="M:Brun.Plan.IPlanTimeParser.Parse(System.String)">
            <summary>
            解析计划表达式
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.ParseResult">
            <summary>
            解析结果
            </summary>
        </member>
        <member name="P:Brun.Plan.ParseResult.Errors">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Brun.Plan.ParseResult.AddError(System.Int32,System.String)">
            <summary>
            添加异常信息
            </summary>
            <param name="n">第n个域的参数</param>
            <param name="msg">错误消息</param>
        </member>
        <member name="M:Brun.Plan.ParseResult.AddTimeCloumn(Brun.Plan.TimeCloumn)">
            <summary>
            添加TimeCloumn
            </summary>
            <param name="timeCloumn"></param>
        </member>
        <member name="P:Brun.Plan.ParseResult.IsError">
            <summary>
            解析是否异常
            </summary>
        </member>
        <member name="P:Brun.Plan.ParseResult.TimeCloumns">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:Brun.Plan.ParseResult.IsWeek">
            <summary>
            是否星期，和日期互斥
            </summary>
        </member>
        <member name="T:Brun.Plan.PlanTime">
            <summary>
            时间计划
            </summary>
        </member>
        <member name="M:Brun.Plan.PlanTime.#ctor(Brun.Plan.IPlanTimeParser)">
            <summary>
            需要自己调用Parse方法
            </summary>
            <param name="planTimeParser"></param>
        </member>
        <member name="M:Brun.Plan.PlanTime.#ctor(System.String,System.Nullable{System.DateTimeOffset},Brun.Plan.IPlanTimeParser)">
            <summary>
            内部已经调用Parse方法
            </summary>
            <param name="strExpression"></param>
            <param name="beginTime"></param>
            <param name="planTimeParser"></param>
        </member>
        <member name="M:Brun.Plan.PlanTime.Parse(System.String)">
            <summary>
            解析时间计划表达式
            </summary>
            <param name="strExpression"></param>
            <returns>true：success，false：error</returns>
        </member>
        <member name="P:Brun.Plan.PlanTime.Expression">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.IsParsed">
            <summary>
            是否已解析
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.Errors">
            <summary>
            解析失败的异常信息
            </summary>
        </member>
        <member name="P:Brun.Plan.PlanTime.Times">
            <summary>
            解析后的结果，仅储存原始字符串和计划策略
            </summary>
        </member>
        <member name="T:Brun.Plan.PlanTimeComputer">
            <summary>
            计算PlanTime下次执行时间
            </summary>
        </member>
        <member name="M:Brun.Plan.PlanTimeComputer.GetNextTime(Brun.Plan.PlanTime,System.DateTimeOffset)">
            <summary>
            计算下一次计划时间
            </summary>
            <param name="planTime">时间计划</param>
            <param name="start"></param>
            <returns>找不到或超出范围返回null</returns>
        </member>
        <member name="T:Brun.Plan.TimeCloumn">
            <summary>
            时间列/表达式的域 6列 yyyy-MM-dd HH:mm:ss 
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeCloumn.#ctor(Brun.Plan.TimeCloumnType)">
            <summary>
            时间列
            </summary>
            <param name="cloumnType"></param>
        </member>
        <member name="M:Brun.Plan.TimeCloumn.#ctor(Brun.Plan.TimeCloumnType,System.String)">
            <summary>
            时间列 6列 yyyy-MM-dd HH:mm:ss 
            </summary>
            <param name="timeCloumnType"></param>
            <param name="planStr"></param>
        </member>
        <member name="M:Brun.Plan.TimeCloumn.SetStrategy(Brun.Plan.TimeStrategy)">
            <summary>
            设置策略类型
            </summary>
            <param name="timeStrategy"></param>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.Plan">
            <summary>
            原始字符串
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.CloumnType">
            <summary>
            Cloumn类型，分/秒/天...
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.TimeStrategy">
            <summary>
            策略类型
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.IsFinish">
            <summary>
            是否已解析完成
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.Min">
            <summary>
            允许的最小值
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeCloumn.Max">
            <summary>
            允许的最大值
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeCloumnType">
            <summary>
            表达式域的类型 yyyy-MM-dd HH:mm:ss 
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.None">
            <summary>
            默认值，没有分配到任何列
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Second">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Minute">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Hour">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Day">
            <summary>
            天
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Month">
            <summary>
            月
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Week">
            <summary>
            星期
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeCloumnType.Year">
            <summary>
            年
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeComputers.BasePlanTimeComputer">
            <summary>
            计算PlanTime下次执行时间，计算流程需要单独控制，特殊情况会递归
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Compute(System.Nullable{System.DateTimeOffset},Brun.Plan.PlanTime)">
            <summary>
            计算下次执行时间
            </summary>
            <param name="startTime"></param>
            <param name="planTime"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Last(System.DateTimeOffset)">
            <summary>
            L 最后n天 仅TimeCloumnType.Day中可用
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Step(System.DateTimeOffset)">
            <summary>
            / 步进 10/5  */5  10-50/5
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.To(System.DateTimeOffset)">
            <summary>
            - 范围 10-30
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.And(System.DateTimeOffset)">
            <summary>
            , 数组 2,5,8
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Any(System.DateTimeOffset)">
            <summary>
            * 任意
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.BasePlanTimeComputer.Number(System.DateTimeOffset)">
            <summary>
            纯数字
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.DayComputer">
            <summary>
            计算天
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.DayComputer.Number(System.DateTimeOffset)">
            <summary>
            范围1-31，有些月只有28，30，29，没有就快进到下个月
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.DayComputer.Last(System.DateTimeOffset)">
            <summary>
            最后N天，L=最后一天 5L=最后一天再往前5天
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.DayComputer.AddDaysFix(System.DateTimeOffset,System.Int32)">
            <summary>
            本月Fix
            </summary>
            <param name="start"></param>
            <param name="planDay"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.HourComputer">
            <summary>
            小时
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.HourComputer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeComputers.MinuteComputer">
            <summary>
            计算分
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.Any(System.DateTimeOffset)">
            <summary>
            *
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.And(System.DateTimeOffset)">
            <summary>
            ,
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.To(System.DateTimeOffset)">
            <summary>
            -
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.MinuteComputer.Step(System.DateTimeOffset)">
            <summary>
            / 步进 第一个参数可能是数字或*或1-10
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.MonthComputer">
            <summary>
            计算月
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeComputers.MonthComputer.initMonth">
            <summary>
            初始月，在这里变化后可能需要重新计算天
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeComputers.MonthComputer.initYear">
            <summary>
            初始年，这里可能跨年，也可能需要重新计算天
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeComputers.MonthComputer.GoBack">
            <summary>
            是否回到Day重新计算
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeComputers.SecondComputer">
            <summary>
            计算秒
            </summary>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.Any(System.DateTimeOffset)">
            <summary>
            * 任意秒
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.And(System.DateTimeOffset)">
            <summary>
            , 和 1,5,10
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.To(System.DateTimeOffset)">
            <summary>
            - 范围 10-50
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Plan.TimeComputers.SecondComputer.Step(System.DateTimeOffset)">
            <summary>
            / 步进 第一个参数可能是数字或*或1-10
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Plan.TimeComputers.YearComputer">
            <summary>
            计算年
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeComputers.YearComputer.initYear">
            <summary>
            年变化后回到dayComputer重新计算
            </summary>
        </member>
        <member name="P:Brun.Plan.TimeComputers.YearComputer.GoBack">
            <summary>
            是否回到Day重新计算
            </summary>
        </member>
        <member name="T:Brun.Plan.TimeStrategy">
            <summary>
            表达式域解析策略
            , - * / ...的各种策略
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.None">
            <summary>
            默认值，没有任何策略
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Number">
            <summary>
            纯数字
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.And">
            <summary>
            , 数组 0,15,45
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.To">
            <summary>
            - 范围 25-45
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Any">
            <summary>
            * 任何 每(秒/天)
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Step">
            <summary>
            / 步进 number或*(等同0)或范围/步进值
            </summary>
        </member>
        <member name="F:Brun.Plan.TimeStrategy.Last">
            <summary>
            L 只能在日期域中出现，最后一天，5L：当月最后一天再倒数5天
            </summary>
        </member>
        <member name="T:Brun.Services.BaseWorkerService`1">
            <summary>
            封装Brun实例对象常用操作
            </summary>
        </member>
        <member name="M:Brun.Services.BaseWorkerService`1.ExistWorkerKey(System.String)">
            <summary>
            是否已有key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Services.IBaseWorkerService`1.AddWorker(Brun.Models.WorkerConfigModel)">
            <summary>
            添加worker
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:Brun.Services.IBaseWorkerService`1.GetWorkers">
            <summary>
            获取worker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Services.IBaseWorkerService`1.ExistWorkerKey(System.String)">
            <summary>
            是否已有key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Services.IOnceWorkerService">
            <summary>
            管理OnceWorker
            </summary>
        </member>
        <member name="M:Brun.Services.IWorkerService.AddWorker(Brun.WorkerConfig,System.Type)">
            <summary>
            添加worker
            </summary>
            <param name="model"></param>
            <param name="workerType"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Services.IWorkerService.AddWorkerAndStart(Brun.WorkerConfig,System.Type)">
            <summary>
            添加worker并运行
            </summary>
            <param name="model"></param>
            <param name="workerType"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Services.OnceWorkerService">
            <summary>
            内存模式管理OnceWorker
            </summary>
        </member>
        <member name="M:Brun.Services.OnceWorkerService.AddOnceBrun(Brun.IOnceWorker,System.Type,Brun.Options.OnceBackRunOption)">
            <summary>
            添加OnceWorker
            </summary>
            <param name="onceWorker"></param>
            <param name="brunType"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Services.TimeWorkerService.AddTimeBrun(Brun.Workers.TimeWorker,System.Type,Brun.Options.TimeBackRunOption)">
            <summary>
            添加TimeWorker
            </summary>
            <param name="timeWorker"></param>
            <param name="brunType"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Services.WorkerService">
            <summary>
            Worker管理，内存中
            </summary>
        </member>
        <member name="T:Brun.WorkerServer">
            <summary>
            进程单例，暂时只考虑单机运行
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.ServerConfig">
            <summary>
            server配置，用于设置系统默认配置
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.Worders">
            <summary>
            所有运行中的worker
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.ServiceProvider">
            <summary>
            服务容器
            </summary>
        </member>
        <member name="P:Brun.WorkerServer.LoggerFactory">
            <summary>
            日志工厂
            </summary>
        </member>
        <member name="M:Brun.WorkerServer.Start(System.IServiceProvider,System.Threading.CancellationToken)">
            <summary>
            启动Brun Server
            </summary>
            <param name="serviceProvider"></param>
            <param name="stoppingToken"></param>
        </member>
        <member name="P:Brun.WorkerServer.Instance">
            <summary>
            进程单例
            </summary>
        </member>
        <member name="T:Brun.Workers.AbstractWorker">
            <summary>
            工作中心基类，可以创建多个，不同实例里面的Context不同
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker._backRuns">
            <summary>
            包含的Backrun
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker._config">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker._context">
            <summary>
            worker上下文
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker.tokenSource">
            <summary>
            管理单个实例的token
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker.taskFactory">
            <summary>
            统一配置实例内的Task
            </summary>
        </member>
        <member name="F:Brun.Workers.AbstractWorker.State_LOCK">
            <summary>
            状态锁
            </summary>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.#ctor(Brun.WorkerConfig)">
            <summary>
            统一构造函数
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Start">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Execute(Brun.Contexts.BrunContext)">
            <summary>
            统一流程控制
            </summary>
            <param name="runContext"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Brun(Brun.Contexts.BrunContext)">
            <summary>
            执行BackRun.Run
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Stop">
            <summary>
            停止
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Observe(Brun.Contexts.BrunContext,Brun.Enums.WorkerEvents)">
            <summary>
            添加拦截器
            </summary>
            <param name="brunContext"></param>
            <param name="workerEvents"></param>
            <returns></returns>
        </member>
        <member name="P:Brun.Workers.AbstractWorker.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Brun.Workers.AbstractWorker.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:Brun.Workers.AbstractWorker.BackRuns">
            <summary>
            包含的Backrun
            </summary>
        </member>
        <member name="P:Brun.Workers.AbstractWorker.RunningTasks">
            <summary>
            正在运行的任务
            </summary>
        </member>
        <member name="M:Brun.Workers.AbstractWorker.Dispose">
            <summary>
            释放单个Worker
            </summary>
        </member>
        <member name="T:Brun.Workers.OnceWorker">
            <summary>
            基础Worker，每次执行一次
            </summary>
        </member>
        <member name="M:Brun.Workers.OnceWorker.StartBrun(System.Type)">
            <summary> 
            开始执行Execute //TODO 以id为基础
            </summary>
        </member>
        <member name="M:Brun.Workers.OnceWorker.Run">
            <summary>
            运行默认第一个添加的BackRun
            </summary>
        </member>
        <member name="M:Brun.Workers.OnceWorker.SetData(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.String})">
            <summary>
            设置共享数据(会覆盖)
            </summary>
            <param name="sharedData"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.OnceWorker.AddData(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.String})">
            <summary>
            添加共享数据(已有不会覆盖)
            </summary>
            <param name="sharedData"></param>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.OnceWorker.AddBrun(System.Type,Brun.Options.OnceBackRunOption)">
            <summary>
            添加Brun实现类
            </summary>
            <param name="backRunType"></param>
            <param name="option"></param>
            <returns></returns>
            <exception cref="T:Brun.Exceptions.BrunException"></exception>
        </member>
        <member name="M:Brun.Workers.OnceWorker.AddBrun``1(Brun.Options.OnceBackRunOption)">
            <summary>
            添加Brun实现类
            </summary>
            <typeparam name="TBackRun"></typeparam>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:Brun.Workers.PlanWorker">
            <summary>
            在计划时间执行的Worker
            </summary>
        </member>
        <member name="T:Brun.Workers.QueueWorker">
            <summary>
            简单的内存Queue 自定义数据类型
            </summary>
        </member>
        <member name="M:Brun.Workers.QueueWorker.#ctor(Brun.WorkerConfig)">
            <summary>
            QueueWorker
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Start">
            <summary>
            启动监听线程
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue(System.String)">
            <summary>
            默认的QueueBackRun,添加消息到后台任务
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue``1(System.String)">
            <summary>
            指定QueueBackRun类型的消息后台任务
            </summary>
            <typeparam name="TQueueBackRun"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue(System.Type,System.String)">
            <summary>
            指定QueueBackRun类型的消息后台任务，可能多个
            </summary>
            <param name="queueBackRunType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Brun.Workers.QueueWorker.Enqueue(System.String,System.String)">
            <summary>
            指定QueueBackRun类型的消息后台任务
            </summary>
            <param name="queueBackRunTypeFullName">包含命名空间的类型名称</param>
            <param name="message"></param>
        </member>
        <member name="T:Brun.Workers.TimeWorker">
            <summary>
            简单的时间循环任务，复杂的定时使用<see cref="T:Brun.Workers.PlanWorker"/>
            //TODO 最简易循环执行任务，继续简化使用
            </summary>
        </member>
        <member name="M:Brun.Workers.TimeWorker.#ctor(Brun.WorkerConfig)">
            <summary>
            
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:Brun.Workers.TimeWorker.Start">
            <summary>
            启动Worker
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.Workers.TimeWorker.InitPreTimeBackRun(Brun.TimeBackRun)">
            <summary>
            添加TimeBackRun前的预处理
            </summary>
            <param name="timeBackRun"></param>
        </member>
        <member name="M:Brun.IOnceWorker.GetData">
            <summary>
            自定义数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IOnceWorker.Run">
            <summary>
            运行默认的BackRun
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IOnceWorker.Run``1">
            <summary>
            运行指定类型的BackRun
            </summary>
            <returns></returns>
        </member>
        <member name="M:Brun.IOnceWorker.Run(System.Type)">
            <summary>
            运行指定类型的BackRun
            </summary>
            <param name="backRunType">backRun类型</param>
            <returns></returns>
        </member>
        <member name="T:Brun.IQueueWorker">
            <summary>
            消息队列Worker
            </summary>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue(System.String)">
            <summary>
            给默认的QueueBackRun发送消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue``1(System.String)">
            <summary>
            给TQueueBackRun发送消息
            </summary>
            <typeparam name="TQueueBackRun"></typeparam>
            <param name="message"></param>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue(System.Type,System.String)">
            <summary>
            给queueBackRunType发送消息
            </summary>
            <param name="queueBackRunType"></param>
            <param name="message"></param>
        </member>
        <member name="M:Brun.IQueueWorker.Enqueue(System.String,System.String)">
            <summary>
            给指定类型的QueueBackRun发送消息
            </summary>
            <param name="queueBackRunTypeFullName">含命名空间的类型全名</param>
            <param name="message"></param>
        </member>
        <member name="T:Brun.ITimeWorker">
            <summary>
            时间周期执行的Worker
            </summary>
        </member>
    </members>
</doc>
